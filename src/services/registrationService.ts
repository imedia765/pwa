import { supabase } from "@/integrations/supabase/client";

export const createAuthUser = async (email: string, password: string) => {
  const { data, error } = await supabase.auth.signUp({
    email,
    password,
  });
  
  if (error) {
    console.error("Auth creation error:", error);
    throw error;
  }
  
  return data;
};

export const createOrUpdateMember = async (
  memberId: string | undefined,
  data: any,
  collectorId: string
) => {
  if (memberId) {
    const { error } = await supabase
      .from('members')
      .update({
        collector_id: collectorId,
        full_name: data.fullName,
        email: data.email,
        phone: data.mobile,
        address: data.address,
        town: data.town,
        postcode: data.postCode,
        date_of_birth: data.dob,
        gender: data.gender,
        marital_status: data.maritalStatus,
        profile_updated: true,
        email_verified: false
      })
      .eq('member_number', memberId)
      .select();

    if (error) throw error;
    return { id: memberId };
  } else {
    const { data: newMember, error } = await supabase
      .from('members')
      .insert({
        collector_id: collectorId,
        full_name: data.fullName,
        email: data.email,
        phone: data.mobile,
        address: data.address,
        town: data.town,
        postcode: data.postCode,
        date_of_birth: data.dob,
        gender: data.gender,
        marital_status: data.maritalStatus,
        status: 'pending',
        profile_updated: true,
        member_number: '', // Will be auto-generated by trigger
      })
      .select()
      .single();

    if (error) throw error;
    return newMember;
  }
};

export const createOrUpdateProfile = async (userId: string, email: string) => {
  const { error } = await supabase
    .from('profiles')
    .upsert({
      id: userId,
      email,
      role: 'member',
      updated_at: new Date().toISOString()
    });

  if (error) throw error;
};

export const createOrUpdateRegistration = async (memberId: string, isNew: boolean) => {
  const { error } = await supabase
    .from('registrations')
    .upsert({
      member_id: memberId,
      status: isNew ? 'pending' : 'completed',
      updated_at: new Date().toISOString()
    });

  if (error) throw error;
};